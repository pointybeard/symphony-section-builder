#!/usr/bin/env php
<?php

declare(strict_types=1);

// This just avoids PHP notices from not having a DOCROOT set.
define("DOCROOT", realpath(__DIR__ . '/../'));

include DOCROOT . '/vendor/autoload.php';

use pointybeard\Symphony\SectionBuilder;
use pointybeard\Helpers\Cli;
use pointybeard\Helpers\Functions;
use pointybeard\Helpers\Cli\Colour\Colour;

$manpage = [
    basename(__FILE__),
    '1.0.0',
    'compare a JSON file section builder export to an existing Symphony CMS installation. The differences between the two will be displayed in a human readable format',
    'diff -j /path/to/file.json --manifest=/path/to/manifest',
];

$collection = (new Cli\Input\InputCollection())
    ->add(
        Cli\Input\InputTypeFactory::build('LongOption')
            ->name('json')
            ->short('j')
            ->flags(Cli\Input\AbstractInputType::FLAG_REQUIRED | Cli\Input\AbstractInputType::FLAG_VALUE_REQUIRED)
            ->description('Path to the input JSON data')
            ->validator(function (Cli\Input\AbstractInputType $input, Cli\Input\AbstractInputHandler $context) {
                // Make sure -j (--json) is a valid file that can be read
                if(false === Functions\Json\json_validate_file($context->find('json'), $code, $message)) {
                    throw new SectionBuilder\Exceptions\SectionBuilderException(sprintf(
                        'The file specified via option --json does not exist or is an invalid JSON document. Returned: %s',
                        $message
                    ));
                }

                return $context->find('json');
            })
    )
;

include DOCROOT . '/src/Includes/common.php';

try{

    $count = (object)[
        SectionBuilder\Diff\Record::OP_ADDED => 0,
        SectionBuilder\Diff\Record::OP_REMOVED => 0,
        SectionBuilder\Diff\Record::OP_UPDATED => 0,
        "total" => 0
    ];

    foreach (SectionBuilder\Diff::fromJsonFile($argv->find('json')) as $d) {
        $count->total++;
        $count->{$d->op}++;

        switch ($d->op) {
            case SectionBuilder\Diff\Record::OP_ADDED:
                echo Colour::colourise(sprintf(
                    'ADDED %s - %s', $d->type, $d->nameNew
                ), Colour::FG_GREEN) . PHP_EOL;
                break;

            case SectionBuilder\Diff\Record::OP_REMOVED:
                echo Colour::colourise(sprintf(
                    'REMOVED %s - %s', $d->type, $d->nameOriginal
                ), Colour::FG_RED) . PHP_EOL;
                break;

            case SectionBuilder\Diff\Record::OP_UPDATED:
                echo Colour::colourise(sprintf(
                    "UPDATED %s - %s changed from '%s' to '%s'",
                    $d->type,
                    $d->nameOriginal,
                    $d->valueOriginal,
                    $d->valueNew
                ), Colour::FG_YELLOW) . PHP_EOL;
                break;

        }
    }

    (new Cli\Message\Message)
        ->message(sprintf(
            'Completed (%d total, %d added, %d updated, %d removed)',
            $count->total,
            $count->{SectionBuilder\Diff\Record::OP_ADDED},
            $count->{SectionBuilder\Diff\Record::OP_UPDATED},
            $count->{SectionBuilder\Diff\Record::OP_REMOVED}
        ))
        ->foreground(Colour::FG_GREEN)
        ->display()
    ;


} catch(Exception $ex) {
    Functions\Cli\display_error_and_exit($ex->getMessage(), 'FATAL ERROR');
}
